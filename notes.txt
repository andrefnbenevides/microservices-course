####################################################################################################################################
#######################				                                                                         #######################
#######################			                        	        KUBERNETES			     	             #######################
#######################				                                                                         #######################	
####################################################################################################################################

###########################
###
### Set up a pod
###
###########################

In the root of your project/solution create a folder named K8S, this file will contain our kubernetes files
Create a file inside K8S named: platforms-depl.yaml
Configure this file as necessary.

To deploy your platforms service, run the following command inside the K8S folder:
	> kubectl apply -f playforms-depl.yaml.

----

To verify if it was deployed successfully run the command:
	> kubectl get deployments

You should be able to see platforms-depl there, notice that READY is 0/1 that means that the container is still not running
Dont worry kubernetes is attempting to run it.

To get the pods for your platform-depl run:

	> kubectl get pods

Hopefully by now if you run again the get deplyoments you will see that it is now READY (1/1)
This means that kubernetes has managed to get the container to run.

If you destroy the deployed container. (IE delete it in docker desktop app)
Kubernetes will restore the container. 
This happens because we specified in the yaml file that we need to have 1 replica running at all times. 
So kubernetes will attempto keep one replica always running.


If you want to delete your deployment successfully without having kubernetes attempt to restore it automatically
you can do so by running the delete command:
	> kubectl delete deployment <your-deployment>

To make sure you get the right deployment first run:
	> kubectl get deployments

Check the name of the deployment you want to delete, in this case assum its name is "platforms-depl", then run:
	> kubectl delete deployment platforms-depl
	

###########################
###
### Set up a node port
###
###########################

Create a file named platforms-np-srv.yaml inside K8S

After creating the file run:
	> kubectl apply -f platforms-np-srv.yaml

To make sure that your service is created you can run:
	> kubectl get services


###########################
###
### Redeployment of app
###
###########################

After making changes in your code you'll need to redeploy the image
The following commands will build your image and push it to docker hub:
	> docker build -t <your-dockerhub-id>/<your-service> .
	> docker push <your-dockerhub-id>/<your-service>

Once the image has been pushed to docker hub, you'll need to request your kubernetes instance to restart.
This will force the instance to fetch the changes from docker hub before running again:
	> kubectl rollout restart deployment <your-service>





####################################################################################################################################
#######################				                                                                         #######################
#######################			                        	        Messaging			     	             #######################
#######################				                                                                         #######################	
####################################################################################################################################

***
** Synchronous Messaging
***
Request/Response cycle
Requester waits for response
Externally facing services are usually synchronous 
Services usually need to know about each other
Some forms of synchronous commuinication: http and grpc
Can cause inter-service dependency chains

***
** Asynchronous Messaging
***
No Request/Response cycle
Request does not wait for response
Data is transfered by eventing. (e.g. pub-sub)
Event bus is usually used (e.g. rabbitmq)
Services are unaware of each other, only the event bus knows where are the services
Good but not perfect, introduces other complexities and issues that do not exist in synchronous messaging




####################################################################################################################################
#######################				                                                                         #######################
#######################					             Building an API Gateway			     	             #######################
#######################				                                                                         #######################	
####################################################################################################################################


###########################
###
### Setup ingress-nginx deployment
###
###########################

you can use ingress nginx (reads as engine x).
Go to https://github.com/kubernetes/ingress-nginx and search for the Getting Started link.
It will forward you to the installation guide of the ingress nginx, at this time you should pick whatever is what you are using.
If you are just building the app on your pc, you will probably be using docker desktop so click on that link.

	> kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/cloud/deploy.yaml

You will notice that if you do :
	> kubectl get deployments
	> kubectl get pods
That you will not be able to see any pods or deployments of nginx, that is because kubernetes uses namespaces
and when we ran those commands those were ran on the "default" namespace, which is the namespace that you have been working it since the beginning

if we run:
	> kubectl get namespace

You will see all the existing namespaces, including one "ingress-nginx"
So, to be able to see the pods and deployments of ingress-nginx we need to type the command like so:
	> kubectl get pods --namespace=ingress-nginx

Generic command:
	> kubectl get pods --namespace=<namespace-you-want-to-see>

This is all you need to do to create a load balancer/API Gateway, now we need to creating the routing so that the ingress-nginx knows
where to it should route traffic.


###########################
###
### Create routing  for ingress-nginx
###
###########################

Inside your K8S folder, create a new file named 'ingress-srv.yaml'
Configure it accordingly to the services you have and want to route to.

After that we need to open our hosts file to redirect traffic from acme.com to the loopback ip





###########################
###
### Storage
###
###########################

1. Persistent Volume Claim
2. Persistent Volume
3. Storage Class


Create a Persistent Volume Claim file named local-pvc.yaml
run 
	> kubectl apply -f local-pvc.yaml

Now if you run the get pvc command you will see the pvc that you just created
	> kubectl get pvc
You should see something like this:
NAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mssql-claim   Bound    pvc-09b3ef64-542d-4115-8b8d-0e65853f5d8d   200Mi      RWX            hostpath       72s

Now lets create our secret password for our mssql instance, doing it in the command line will allow you to keep it secret as the alternative
is to store the password in a file and by doing that everything becomes less secure.
run
	kubectl create secret generic mssql --from-literal=SA_PASSWORD="your-pass-here"

With the pvc and secret created we can now start creating the yaml file for our database instance.
Create a new file named mssql-plat-depl.yaml (this will be the platforms database)
After creating the file, apply the yaml file:
	> kubectl apply -f mssql-plat-depl.yaml

---------------

After this we can start using the sqlserver for our production and development
but in case you want to keep the inmemory database for development, there are a few steps taht you need to do:

If you run:
	> dotnet ef migrations add initialmigration

You will see that you'll get an error and that is because EF thinks you are using InMemory database and he is correct
But you will need those migrations for productions so we need to trick EF to think that we are using a database model that supports migrations.

So to achieve this, go back to your code in Startup.cs and comment the references to the InMem database and just keep the UseSqlServer statement.
Also comment the line PrepDb.PrepPopulation(app, _env.IsProduction());

Now go to your appsettings.production.json file and copy the connectionstrings attribute to your development.json file.
You need to do this because with the code that you are left with, on the startup the project iwll attempt to check the connectionstring from 
the development file and it would not find it otherwise.

On the pasted connectionstring, you need to replace the reference to your kubernetes container and change it to localhost

After doing this you can run again the ef migrations command and you should see a new folder named 'Migrations' should have been generated for You
with the steps on how to create our database.

Once the migrations are done, uncomment the code that you previously commented back, save everything and now its time to update our docker image
with our new code.

Run 
	> docker build -t <your-docker-id>/platformservice .
	> docker push <your-docker-id>/platformservice

If everything went OK without any errors, we should be able to see that our image is updated in docker hub.
If you visit the website you'll see that your image should say that has been updated some seconds ago.

With the docker image updated we now need to restart your kubernetes container because it is not aware that there is a new version.
Everytime that a kubernetes container restarts, it searches for a new version (because we specified in our yaml file that it should use the latest verion always)
So by restarting the container it should go and fetch the new updated docker image

	> kubectl get deployments
Search for the name of the deployment of the platforms service
	> kubectl rollout restart deployment platforms-depl
	> kubectl get pods

Now depending on how fast you and your pc is, you should either see that the container is being created or that it has been created a couple of seconds/minutes ago.
This means that the container has restarted successfully.

